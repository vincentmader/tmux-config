# ╔═══════════════════════════════════════════════════════════════════════════╗
# ║                               TMUX.CONF                                   ║
# ╚═══════════════════════════════════════════════════════════════════════════╝

#                                                                   GENERAL {{{
# ═════════════════════════════════════════════════════════════════════════════

# Use `zsh` as default shell.
  set-option -g default-shell /bin/zsh

# Enable UTF-8 encoding for the entire TMUX sessions.
  set -gq utf8 on             # <- both status & main
# set -gq status-utf8 on      # <- only status

# Disable automatic renaming of windows.
  set-option -g allow-rename off

# Increase scrollback buffer size.
  set -g history-limit 50000

# }}}
#                                                                KEY REMAPS {{{
# ═════════════════════════════════════════════════════════════════════════════

# Re-define "prefix" key (`Ctrl-b` -> `Ctrl-a`).
  unbind C-b
  set-option -g prefix C-a
  bind-key C-a send-prefix

# Source `tmux.conf` via `prefix r`.
  bind r source-file "$XDG_CONFIG_HOME/tmux/tmux.conf" \; display-message "TMUX config reloaded..."

# Create new window via `prefix c`.
  bind c new-window -c '#{pane_current_path}'

# Split panes using `prefix .` & `prefix -`. Open new panes at `$PWD`.
  unbind '"'
  unbind %
  bind . split-window -h -c '#{pane_current_path}'
  bind - split-window -v -c '#{pane_current_path}'

# }}}
#                                                                    VISUAL {{{
# ═════════════════════════════════════════════════════════════════════════════

#                                                                        Colors
# ─────────────────────────────────────────────────────────────────────────────

# Enable full colors.
  set -g default-terminal "screen-256color"

# Set color of pane divider.
  set-option -g pane-border-style fg="#222222"
  set-option -g pane-active-border-style fg="#222222"

# Set color of message text.
  set-option -g message-style fg=colour4,bg=colour0

# Set color of clock (Activate with `prefix t`).
  set-window-option -g clock-mode-colour colour64  # -> green
  set -wg mode-style bg=blue,fg=black

#                                                                    Status Bar
# ─────────────────────────────────────────────────────────────────────────────

# De-/activate status bar.
  set-option -g status off

# Update status bar every 10 seconds.
  set status-interval 10

# Center window list.
  set -g status-justify centre

# Configure status bar to be shown at the top.
  # set-option -g status-position top

# Define status bar colors.
  set -g status-bg black
  set -g status-fg blue

## things to show on left side
#set status-left-length 40
#set -g status-left ' #S'
## things to show on right side
#set status-right-length 80
#set -g status-right '#{cpu_fg_color}CPU#{cpu_percentage} #[fg=colour64] %t %t #{network_bandwidth} %t %t %t ♡ #(/Users/meister/.tmux/status_bar_scripts/battery.sh) %t %t %t %a %Y-%m-%d %H:%M '
# set -g status-right '#{network_bandwidth} %t %t %t ♡ #(/Users/meister/.tmux/status_bar_scripts/battery.sh) %t %t %t %a %Y-%m-%d %H:%M '
##set -g status-right '♡ #(/Users/meister/.tmux/status_bar_scripts/battery.sh) %t %t %t %a %Y-%m-%d %H:%M '
## cpu display in status bar
#set -g @cpu_percentage_format "%3.0f%%" # printf format to use to display percentage
# default statusbar colors
# set-option -g status-style fg=colour64,bg=colour235 #colour235

# }}}
#                                                                NAVIGATION {{{
# =============================================================================

# Enable mouse control (clickable windows, panes, resizable panes).
  set -g mouse on

# Use vim key bindings in copy mode
  # setw -g mode-keys vi

# Configure smart pane switching, with awareness of Vim splits.
# -> See: https://github.com/christoomey/vim-tmux-navigator
  is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
      | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
  bind-key -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
  bind-key -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
  bind-key -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
  bind-key -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
  # bind-key -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"
  bind-key -T copy-mode-vi C-h select-pane -L
  bind-key -T copy-mode-vi C-j select-pane -D
  bind-key -T copy-mode-vi C-k select-pane -U
  bind-key -T copy-mode-vi C-l select-pane -R
  # bind-key -T copy-mode-vi C-\ select-pane -l

# }}}
#                                                                 RESURRECT {{{
# ═════════════════════════════════════════════════════════════════════════════

# Enable `continuum-restore`.
  set -g @continuum-restore 'on'

# Define directory where sessions will be saved to.
  set -g @resurrect-dir "$XDG_DATA_HOME/tmux/sessions"

# ... (?)
  set -g @resurrect-strategy-vim 'session'  # for vim session reload
  set -g @resurrect-strategy-nvim 'session' # for neovim session reload
  set -g @resurrect-save-command-strategy 'pgrep'
# set -g @resurrect-hook-post-save-all 'eval $(xdotool getwindowgeometry --shell $WINDOWID); echo 0,$X,$Y,$WIDTH,$HEIGHT > $HOME/.tmux/resurrect/geometry'
# set -g @resurrect-hook-pre-restore-all 'wmctrl -i -r $WINDOWID -e $(cat $HOME/.tmux/resurrect/geometry)'

# }}}
#                                                                       VIM {{{
# ═════════════════════════════════════════════════════════════════════════════

# Make vim autoread actually work (reload files changed on disk).
  set -g focus-events on

# Address vim mode switching delay (http://superuser.com/a/252717/65504)
  # set -s escape-time 0  # TODO: not working

# }}}
#                                                      TMUX package manager {{{
# ═════════════════════════════════════════════════════════════════════════════
# NOTE: This needs to be at the bottom of `tmux.conf`.

# Define directory where plugins should be installed to. 
  set-environment -g TMUX_PLUGIN_MANAGER_PATH "$XDG_DATA_HOME/tmux/plugins"

# Define list of plugins that should be installed:
  set -g @plugin 'tmux-plugins/tpm'
  set -g @plugin 'tmux-plugins/tmux-resurrect'
  set -g @plugin 'tmux-plugins/tmux-continuum'
# set -g @plugin 'tmux-plugins/tmux-sensible' # install? sensible defaults
# Examples:
# set -g @plugin 'github_username/plugin_name'
# set -g @plugin 'git@github.com/user/plugin'
# set -g @plugin 'git@bitbucket.com/user/plugin'
# set -g @plugin 'xamut/tmux-network-bandwidth'
# set -g @plugin 'tmux-plugins/tmux-cpu'
# set -g @plugin 'tmux-plugins/tmux-sensible'

# Initialize TMUX package manager `tpm`.
  run -b '~/.local/share/tmux/plugins/tpm/tpm'

# }}}
#                                                                   VARIOUS {{{
# ═════════════════════════════════════════════════════════════════════════════

# automatically restore tmux state (TODO: make this work)
# set -g @continuum-restore 'on'

# loud or quiet?
# set-option -g visual-activity off
# set-option -g visual-bell off
# set-option -g visual-silence off
# set-window-option -g monitor-activity off
# set-window-option -g bell-action none

# enter copy mode with 'prefix esc'
# unbind [
# bind Escape copy-mode
# select and yank with v and y, reactangle-toggle with r    (not yet working)
# bind P paste-buffer
# bind-key -T copy-mode-vi v send-keys -X begin-selection
# bind-key -T copy-mode-vi y send-keys -X copy-selection
# bind-key -T copy-mode-vi r send-keys -X rectangle-toggle
# copy to system clipboard                                  (not yet working)
# bind -t vi-copy y copy-pipe "xclip -sel clip -i"

# bind-key -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"

# active window title
# set-window-option -g window-status-current-style fg=colour166,bg=default #orange and default
# prefix highlight color
# set -g @prefix_highlight_bg 'color112'  # default is 'colour04'
# set cpu display color
# set -g @cpu_low_fg_color "#[fg=colour64]" # background color when cpu is low
# set -g @cpu_medium_fg_color "#[fg=colour64]" # background color when cpu is medium
# set -g @cpu_high_fg_color "#[fg=colour166]" # background color when cpu is high

# }}}
